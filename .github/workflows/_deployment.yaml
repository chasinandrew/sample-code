on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true
        description: Name of the target deployment environment. Acceptable values are 'dev', 'qa', or 'prod'.
      ref:  
        type: string
        required: true
        description: The branch, tag or SHA to checkout.
      enable:
        type: boolean
        required: false
        default: true
        description: Whether or not to perform the actual deployment. The default value is true, or perform the deployment.
      gcp_project_id:
        type: string
        required: true
        description: The Google Cloud project ID.
      artifact_registry_repo:
        type: string
        required: true
        description: The artifact registry repository name.
      region:
        type: string
        required: true
        description: The artifact registry region name.
      service_name:
        type: string
        required: true
        description: The container service name.
      code_directory: 
        type: string
        required: true
        description: The directory where the source code lives. 
      cloud_run_sa: 
        type: string
        required: false
        description: The directory where the source code lives. 
      language: 
        type: string
        required: true
        description: Language the code is written in. 
      app_code: 
        type: string
        required: true
        description: App code for labels. 
      classification: 
        type: string
        required: true
        description: Data classification for labels. 
      cost_id: 
        type: string
        required: true
        description: Cost ID for labels. 
      department_id: 
        type: string
        required: true
        description: Department ID for labels. 
      hca_project_id: 
        type: string
        required: true
        description: HCA project ID for labels. 
      tco_id: 
        type: string
        required: true
        description: TCO ID for labels. 
jobs:
  lint: #TODO: add linter for csharp / dotnet 
    name: Lint
    if: github.event_name == 'pull_request'
    runs-on: 'ubuntu-latest'
    timeout-minutes: 360
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    #TODO: add editor config for dotnet
    - name: PyLint 
      working-directory: ${{ vars.code_directory }}
      run: |
        pip install -r requirements.txt
        pip install pylint
        pylint --recursive=y .

  scan:
    name: Scan
    if: github.event_name == 'pull_request'
    runs-on: 'ubuntu-latest'
    needs: lint
    timeout-minutes: 360
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ '${{ vars.language }}' ] #TODO: add csharp

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        source-root: ${{ vars.code_directory }}

    # Autobuild attempts to build any compiled languages (C/C++, C#, Go, Java, or Swift).
    # If this step fails, then you should remove it and run the build manually (see below)
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2
    #TODO: add if statement for dotnet and python

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{matrix.language}}"

  image-build-push: 
    if: contains(fromJSON('["develop", "main"]'), github.ref_name)
    name: "Image Build & Push"
    runs-on: ubuntu-latest
    environment: ${{ vars.environment }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Google Authentication
        id: auth
        uses: 'google-github-actions/auth@v0'
        with:
          token_format: 'access_token'
          workload_identity_provider: '${{ secrets.WIF_PROVIDER }}' # e.g. - projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider
          service_account: '${{ secrets.WIF_SERVICE_ACCOUNT }}'     # e.g. - my-service-account@my-project.iam.gserviceaccount.com

      # Authenticate Docker to Google Cloud Artifact Registry
      - name: Docker Authentication
        id: docker-auth
        uses: 'docker/login-action@v1'
        with:
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'
          registry: '${{ vars.region }}-docker.pkg.dev'

      - name: Build and Tag
        id: build-image
        uses: docker/build-push-action@v3
        with:
          context: ${{ vars.code_directory }}
          push: true 
          tags: |
            ${{ vars.region }}-docker.pkg.dev/${{ vars.gcp_project_id }}/${{ vars.artifact_registry_repo }}/${{ vars.service_name }}:${{ github.ref }}
            ${{ vars.region }}-docker.pkg.dev/${{ vars.gcp_project_id }}/${{ vars.artifact_registry_repo }}/${{ vars.service_name }}:latest
      
      #TODO: push fromo QA to PROD, build once 
      - name: Docker Push
        shell: bash
        run: |-
          docker push "${{ vars.region }}-docker.pkg.dev/${{ vars.gcp_project_id }}/${{ vars.artifact_registry_repo }}/${{ vars.service_name }}:${{ github.ref }}"
          docker push "${{ vars.region }}-docker.pkg.dev/${{ vars.gcp_project_id }}/${{ vars.artifact_registry_repo }}/${{ vars.service_name }}:latest"

  deploy: 
    if: contains(fromJSON('["develop", "main"]'), github.ref_name) && ${{ vars.environment }} != "prod" 
    name: "Cloud Run Deployment"
    runs-on: ubuntu-latest
    environment: ${{ vars.environment }}
    needs: [image-build-push]
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Google Authentication
        id: auth
        uses: 'google-github-actions/auth@v0'
        with:
          token_format: 'access_token'
          workload_identity_provider: '${{ secrets.WIF_PROVIDER }}' # e.g. - projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider
          service_account: '${{ secrets.WIF_SERVICE_ACCOUNT }}'     # e.g. - my-service-account@my-project.iam.gserviceaccount.com

      - name: Create Service ${{ vars.environment }} Declaration   
        run: |-
          export CONTAINER_IMAGE="${{ vars.region }}-docker.pkg.dev/${{ vars.gcp_project_id }}/${{ vars.artifact_registry_repo }}/${{ vars.service_name }}:${{ github.ref }}"
          export SERVICE_NAME="${{ vars.service_name }}"
          export PROJECT_ID="${{ vars.gcp_project_id }}"
          export REVISION_TAG="${{ github.ref }}"
          export CLOUD_RUN_SA="${{ vars.cloud_run_sa }}"
          export REGION="${{ vars.region }}"
          export APP_CODE="${{ vars.app_code }}"
          export CLASSIFICATION="${{ vars.classification }}"
          export COST_ID="${{ vars.cost_id }}"
          export DEPARTMENT_ID="${{ vars.department_id }}"
          export HCA_PROJECT_ID="${{ vars.hca_project_id }}"
          export TCO_ID="${{ vars.tco_id }}"
          export ENVIRONMENT="${{ vars.environment }}"
          envsubst < ./service-yaml/container-${{ vars.environment }}.yaml > container-${{ vars.environment }}.yaml
        
      - name: Deploy to ${{ vars.environment }} Cloud Run
        id: deploy-dev-qa
        uses: google-github-actions/deploy-cloudrun@v0
        with:
          project_id: ${{ vars.gcp_project_id }}
          service: ${{ vars.service_name }}
          region: ${{ vars.region }}
          metadata: container-${{ vars.environment }}.yaml 